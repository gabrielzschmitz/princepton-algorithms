/*
  Program Description:
  --------------------
  This Java program, named PercolationVisualizer.java, visualizes the
  percolation process based on the input data provided in a file. The input
  file contains the grid size and a sequence of sites to open within the grid.
  After each site is opened, the program displays the percolation system with
  full sites in light blue, open sites (that aren't full) in white, and blocked
  sites in black. The upper left-hand corner represents site (1, 1).

  Implementation Details:
  -----------------------
  - The program uses the Percolation data type to model the percolation system.
  - It reads the input file, which specifies the grid size and the sequence of
    sites to open.
  - The draw() method visualizes the percolation system using StdDraw, a
    standard library for drawing.
  - The main() method orchestrates the process of reading the input file,
    opening sites, and visualizing the percolation system.

  Dependencies:
  -------------
  - Percolation.java: Contains the implementation of the Percolation data
    type.
  - edu.princeton.cs.algs4.In: Standard library for input streams.
  - edu.princeton.cs.algs4.StdDraw: Standard library for drawing.

  Usage Example:
  --------------
  Assuming there exists an input file named "input.txt" with the following
  contents:
  5
  11
  22
  33
  44
  55

  Upon execution with the command `java PercolationVisualizer input.txt`, the
  program will visualize the percolation process based on the specified grid
  size and sequence of sites to open.

  Note: The visualization generated by this program aids in understanding the
  percolation process and provides insights into how the system evolves as sites
  are opened.
*/
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import java.awt.Font;

public class PercolationVisualizer {
  private static final int DELAY = 100;

  public static void draw(Percolation perc, int n) {
    StdDraw.clear();
    StdDraw.setPenColor(StdDraw.BLACK);
    StdDraw.setXscale(-0.05 * n, 1.05 * n);
    StdDraw.setYscale(-0.05 * n, 1.05 * n);
    StdDraw.filledSquare(n / 2.0, n / 2.0, n / 2.0);

    int opened = 0;

    for (int row = 1; row <= n; row++) {
      for (int col = 1; col <= n; col++) {
        if (perc.isFull(row, col)) {
          StdDraw.setPenColor(StdDraw.BOOK_LIGHT_BLUE);
          opened++;
        } else if (perc.isOpen(row, col)) {
          StdDraw.setPenColor(StdDraw.WHITE);
          opened++;
        } else StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(col - 0.5, n - row + 0.5, 0.45);
      }
    }

    StdDraw.setPenColor(StdDraw.BLACK);
    StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
    StdDraw.text(0.25 * n, -0.025 * n, opened + " open sites");
    if (perc.percolates()) StdDraw.text(0.75 * n, -0.025 * n, "percolates");
    else StdDraw.text(0.75 * n, -0.025 * n, "does not percolate");
  }

  public static void main(String[] args) {
    In in = new In(args[0]);
    int n = in.readInt();

    StdDraw.enableDoubleBuffering();

    Percolation perc = new Percolation(n);
    draw(perc, n);
    StdDraw.show();
    StdDraw.pause(DELAY);
    while (!in.isEmpty()) {
      int i = in.readInt();
      int j = in.readInt();
      perc.open(i, j);
      draw(perc, n);
      StdDraw.show();
      StdDraw.pause(DELAY);
    }
  }
}
